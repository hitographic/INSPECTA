import React, { useState, useRef, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { ArrowLeft, Camera, Upload, Trash2, ChevronDown, ChevronUp } from 'lucide-react';
import { MonitoringRecord, saveMonitoringRecord, getMonitoringRecords, deleteMonitoringRecord, updateMonitoringSessionStatus, AREA_OPTIONS } from '../utils/monitoringDatabase';

interface LocationState {
  plant: string;
  tanggal: string;
  line: string;
  regu: string;
  shift: string;
  editMode?: boolean;
}

interface DataEntry {
  data_number: number;
  foto_url: string | null;
  keterangan: string;
  id?: string;
}

interface AreaData {
  area: string;
  entries: DataEntry[];
  expanded: boolean;
}

const CreateMonitoringScreen: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const state = location.state as LocationState;

  const [plant] = useState(state?.plant || 'Plant-1');
  const [tanggal] = useState(state?.tanggal || new Date().toISOString().split('T')[0]);
  const [line] = useState(state?.line || 'Line 1');
  const [regu] = useState(state?.regu || 'A');
  const [shift] = useState(state?.shift || '1');

  const [selectedArea, setSelectedArea] = useState('');
  const [showAreaDropdown, setShowAreaDropdown] = useState(false);
  const [currentDataNumber, setCurrentDataNumber] = useState(1);
  const [currentFoto, setCurrentFoto] = useState<string | null>(null);
  const [currentKeterangan, setCurrentKeterangan] = useState('');
  const [showDataForm, setShowDataForm] = useState(false);

  const [savedAreas, setSavedAreas] = useState<AreaData[]>([]);
  const [saving, setSaving] = useState(false);

  const [cameraVisible, setCameraVisible] = useState(false);
  const [isCapturing, setIsCapturing] = useState(false);
  const [cameraError, setCameraError] = useState('');

  const videoRef = useRef<HTMLVideoElement>(null);
  const uploadRef = useRef<HTMLInputElement>(null);

  const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');

  useEffect(() => {
    if (state?.editMode) {
      loadExistingData();
    }
  }, []);

  const loadExistingData = async () => {
    try {
      const records = await getMonitoringRecords(plant, {
        startDate: tanggal,
        endDate: tanggal,
        lines: [line],
        regus: [regu],
        shifts: [shift]
      });

      const areaMap: { [area: string]: DataEntry[] } = {};

      records.forEach(record => {
        if (!areaMap[record.area]) {
          areaMap[record.area] = [];
        }
        areaMap[record.area].push({
          id: record.id,
          data_number: record.data_number,
          foto_url: record.foto_url,
          keterangan: record.keterangan || ''
        });
      });

      const areasData: AreaData[] = Object.entries(areaMap).map(([area, entries]) => ({
        area,
        entries: entries.sort((a, b) => a.data_number - b.data_number),
        expanded: false
      }));

      setSavedAreas(areasData);
    } catch (error) {
      console.error('Error loading existing data:', error);
    }
  };

  const handleGenerate = () => {
    if (!selectedArea) {
      alert('Pilih area terlebih dahulu');
      return;
    }

    const existingArea = savedAreas.find(a => a.area === selectedArea);
    if (existingArea && existingArea.entries.length > 0) {
      setCurrentDataNumber(existingArea.entries.length + 1);
    } else {
      setCurrentDataNumber(1);
    }

    setCurrentFoto(null);
    setCurrentKeterangan('');
    setShowDataForm(true);
  };

  const handleCameraClick = async () => {
    setCameraVisible(true);
    setCameraError('');
    setIsCapturing(false);

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
    } catch (error) {
      console.error('Camera error:', error);
      setCameraError('Tidak dapat mengakses kamera. Pastikan izin kamera telah diberikan.');
    }
  };

  const handleCapture = async () => {
    if (!videoRef.current || isCapturing) return;

    setIsCapturing(true);
    try {
      const canvas = document.createElement('canvas');
      canvas.width = videoRef.current.videoWidth;
      canvas.height = videoRef.current.videoHeight;
      const ctx = canvas.getContext('2d');
      if (ctx) {
        ctx.drawImage(videoRef.current, 0, 0);
        const photoDataUrl = canvas.toDataURL('image/jpeg', 0.8);
        setCurrentFoto(photoDataUrl);
        handleCloseCamera();
      }
    } catch (error) {
      console.error('Capture error:', error);
      alert('Gagal mengambil foto');
    } finally {
      setIsCapturing(false);
    }
  };

  const handleCloseCamera = () => {
    if (videoRef.current?.srcObject) {
      const stream = videoRef.current.srcObject as MediaStream;
      stream.getTracks().forEach(track => track.stop());
      videoRef.current.srcObject = null;
    }
    setCameraVisible(false);
    setCameraError('');
  };

  const handleUploadClick = () => {
    uploadRef.current?.click();
  };

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      setCurrentFoto(event.target?.result as string);
    };
    reader.readAsDataURL(file);
  };

  const handleTambahDataBaru = async () => {
    if (!currentFoto) {
      alert('Foto belum diambil');
      return;
    }

    if (!currentKeterangan.trim()) {
      alert('Keterangan harus diisi');
      return;
    }

    setSaving(true);
    try {
      const newEntry: DataEntry = {
        data_number: currentDataNumber,
        foto_url: currentFoto,
        keterangan: currentKeterangan
      };

      const record: Partial<MonitoringRecord> = {
        plant,
        tanggal,
        line,
        regu,
        shift,
        area: selectedArea,
        data_number: currentDataNumber,
        foto_url: currentFoto,
        keterangan: currentKeterangan,
        status: 'draft',
        created_by: currentUser.username || 'Unknown'
      };

      const savedRecord = await saveMonitoringRecord(record);
      newEntry.id = savedRecord.id;

      const existingAreaIndex = savedAreas.findIndex(a => a.area === selectedArea);
      if (existingAreaIndex >= 0) {
        const updatedAreas = [...savedAreas];
        updatedAreas[existingAreaIndex].entries.push(newEntry);
        updatedAreas[existingAreaIndex].entries.sort((a, b) => a.data_number - b.data_number);
        setSavedAreas(updatedAreas);
      } else {
        setSavedAreas([...savedAreas, {
          area: selectedArea,
          entries: [newEntry],
          expanded: true
        }]);
      }

      setCurrentDataNumber(currentDataNumber + 1);
      setCurrentFoto(null);
      setCurrentKeterangan('');
      alert('Data berhasil ditambahkan');
    } catch (error) {
      console.error('Error saving data:', error);
      alert('Gagal menyimpan data');
    } finally {
      setSaving(false);
    }
  };

  const handleSimpanSementara = () => {
    alert('Data sudah tersimpan sebagai draft');
  };

  const handleSimpanSemua = async () => {
    const confirmSave = window.confirm('Yakin ingin menyimpan semua data sebagai complete?');
    if (!confirmSave) return;

    setSaving(true);
    try {
      for (const areaData of savedAreas) {
        await updateMonitoringSessionStatus(
          plant,
          tanggal,
          line,
          regu,
          shift,
          areaData.area,
          'complete'
        );
      }

      alert('Semua data berhasil disimpan');
      navigate('/monitoring-records', { state: { selectedPlant: plant } });
    } catch (error) {
      console.error('Error saving all data:', error);
      alert('Gagal menyimpan data');
    } finally {
      setSaving(false);
    }
  };

  const handleDeleteEntry = async (areaIndex: number, entryIndex: number) => {
    const confirmDelete = window.confirm('Hapus data ini?');
    if (!confirmDelete) return;

    const entry = savedAreas[areaIndex].entries[entryIndex];
    if (entry.id) {
      try {
        await deleteMonitoringRecord(entry.id);
        const updatedAreas = [...savedAreas];
        updatedAreas[areaIndex].entries.splice(entryIndex, 1);
        if (updatedAreas[areaIndex].entries.length === 0) {
          updatedAreas.splice(areaIndex, 1);
        }
        setSavedAreas(updatedAreas);
        alert('Data berhasil dihapus');
      } catch (error) {
        console.error('Error deleting entry:', error);
        alert('Gagal menghapus data');
      }
    }
  };

  const toggleAreaExpand = (index: number) => {
    const updatedAreas = [...savedAreas];
    updatedAreas[index].expanded = !updatedAreas[index].expanded;
    setSavedAreas(updatedAreas);
  };

  const totalData = savedAreas.reduce((sum, area) => sum + area.entries.length, 0);

  return (
    <div style={{ minHeight: '100vh', background: 'linear-gradient(135deg, #f97316 0%, #ea580c 100%)', padding: '20px' }}>
      <div style={{ maxWidth: '600px', margin: '0 auto' }}>
        <button
          onClick={() => navigate('/monitoring-records', { state: { selectedPlant: plant } })}
          style={{
            background: 'white',
            border: 'none',
            borderRadius: '16px',
            padding: '16px',
            marginBottom: '20px',
            cursor: 'pointer',
            boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
          }}
        >
          <ArrowLeft size={24} color="#f97316" />
        </button>

        <div style={{
          background: 'white',
          borderRadius: '24px',
          padding: '32px',
          boxShadow: '0 8px 32px rgba(0,0,0,0.1)',
          marginBottom: '24px'
        }}>
          <h1 style={{
            fontSize: '28px',
            fontWeight: '700',
            textAlign: 'center',
            marginBottom: '8px',
            color: '#1a202c'
          }}>Create Monitoring</h1>
          <p style={{
            textAlign: 'center',
            color: '#718096',
            marginBottom: '24px'
          }}>{plant}</p>

          <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#2d3748', fontSize: '14px' }}>Tanggal</label>
              <div style={{
                width: '100%',
                padding: '14px',
                background: '#f7fafc',
                border: '2px solid #fed7aa',
                borderRadius: '12px',
                color: '#2d3748',
                fontSize: '16px',
                fontWeight: '500'
              }}>
                {new Date(tanggal).toLocaleDateString('id-ID', {
                  day: '2-digit',
                  month: '2-digit',
                  year: 'numeric'
                })}
              </div>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '12px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#2d3748', fontSize: '14px' }}>Line</label>
                <div style={{
                  padding: '14px',
                  background: '#ffedd5',
                  border: '2px solid #fed7aa',
                  borderRadius: '12px',
                  textAlign: 'center',
                  fontWeight: '600',
                  fontSize: '16px',
                  color: '#1a202c'
                }}>
                  {line}
                </div>
              </div>
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#2d3748', fontSize: '14px' }}>Regu</label>
                <div style={{
                  padding: '14px',
                  background: '#ffedd5',
                  border: '2px solid #fed7aa',
                  borderRadius: '12px',
                  textAlign: 'center',
                  fontWeight: '600',
                  fontSize: '16px',
                  color: '#1a202c'
                }}>
                  {regu}
                </div>
              </div>
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#2d3748', fontSize: '14px' }}>Shift</label>
                <div style={{
                  padding: '14px',
                  background: '#ffedd5',
                  border: '2px solid #fed7aa',
                  borderRadius: '12px',
                  textAlign: 'center',
                  fontWeight: '600',
                  fontSize: '16px',
                  color: '#1a202c'
                }}>
                  {shift}
                </div>
              </div>
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500', color: '#2d3748', fontSize: '14px' }}>Area</label>
              <div style={{ position: 'relative' }}>
                <button
                  onClick={() => setShowAreaDropdown(!showAreaDropdown)}
                  style={{
                    width: '100%',
                    padding: '14px',
                    border: '2px solid #fed7aa',
                    borderRadius: '12px',
                    textAlign: 'left',
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    background: 'white',
                    fontSize: '16px',
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                >
                  <span style={{
                    color: selectedArea ? '#1a202c' : '#9ca3af',
                    fontWeight: selectedArea ? '600' : '400'
                  }}>
                    {selectedArea || 'Pilih Area'}
                  </span>
                  <span style={{ color: '#9ca3af' }}>▼</span>
                </button>
                {showAreaDropdown && (
                  <div style={{
                    position: 'absolute',
                    zIndex: 10,
                    width: '100%',
                    marginTop: '8px',
                    background: 'white',
                    border: '2px solid #fed7aa',
                    borderRadius: '12px',
                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',
                    maxHeight: '256px',
                    overflowY: 'auto'
                  }}>
                    {AREA_OPTIONS.map(area => (
                      <button
                        key={area}
                        onClick={() => {
                          setSelectedArea(area);
                          setShowAreaDropdown(false);
                          setShowDataForm(false);
                        }}
                        style={{
                          width: '100%',
                          padding: '14px',
                          textAlign: 'left',
                          background: 'white',
                          border: 'none',
                          cursor: 'pointer',
                          fontSize: '16px',
                          transition: 'background 0.2s'
                        }}
                        onMouseEnter={(e) => e.currentTarget.style.background = '#ffedd5'}
                        onMouseLeave={(e) => e.currentTarget.style.background = 'white'}
                      >
                        {area}
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>

            {selectedArea && !showDataForm && (
              <div>
                <p style={{ fontSize: '14px', color: '#718096', marginBottom: '8px' }}>Generate untuk mengambil foto</p>
                <button
                  onClick={handleGenerate}
                  style={{
                    width: '100%',
                    padding: '16px 24px',
                    background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                    color: 'white',
                    border: 'none',
                    borderRadius: '12px',
                    fontWeight: '700',
                    fontSize: '18px',
                    cursor: 'pointer',
                    boxShadow: '0 4px 12px rgba(16,185,129,0.3)',
                    transition: 'transform 0.2s'
                  }}
                  onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-2px)'}
                  onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0)'}
                >
                  Generate
                </button>
              </div>
            )}
          </div>
        </div>

        {showDataForm && selectedArea && (
          <div style={{
            background: 'white',
            borderRadius: '24px',
            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',
            padding: '32px',
            marginBottom: '24px'
          }}>
            <div style={{ marginBottom: '20px' }}>
              <button
                onClick={() => setShowDataForm(false)}
                style={{
                  fontSize: '14px',
                  color: '#718096',
                  background: 'none',
                  border: 'none',
                  cursor: 'pointer',
                  padding: '8px 0'
                }}
                onMouseEnter={(e) => e.currentTarget.style.color = '#1a202c'}
                onMouseLeave={(e) => e.currentTarget.style.color = '#718096'}
              >
                ← Kembali ke pilihan area
              </button>
            </div>

            {savedAreas.map((areaData, areaIndex) => (
              <div key={areaIndex} style={{ marginBottom: '16px' }}>
                <button
                  onClick={() => toggleAreaExpand(areaIndex)}
                  style={{
                    width: '100%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    padding: '16px',
                    background: '#fff7ed',
                    border: '2px solid #fed7aa',
                    borderRadius: '12px',
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => e.currentTarget.style.background = '#ffedd5'}
                  onMouseLeave={(e) => e.currentTarget.style.background = '#fff7ed'}
                >
                  <div style={{ textAlign: 'left' }}>
                    <div style={{ fontWeight: '600', color: '#1a202c', marginBottom: '4px' }}>
                      Data ke-{areaData.entries.map(e => e.data_number).join(', ')}
                    </div>
                    <div style={{ fontSize: '14px', color: '#718096' }}>
                      Area: {areaData.area} ({areaData.entries.length} data tersimpan)
                    </div>
                  </div>
                  {areaData.expanded ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                </button>

                {areaData.expanded && (
                  <div style={{ marginTop: '8px', display: 'flex', flexDirection: 'column', gap: '8px' }}>
                    {areaData.entries.map((entry, entryIndex) => (
                      <div key={entryIndex} style={{
                        padding: '16px',
                        background: '#f7fafc',
                        border: '1px solid #e2e8f0',
                        borderRadius: '12px'
                      }}>
                        <div style={{
                          display: 'flex',
                          justifyContent: 'space-between',
                          alignItems: 'start',
                          marginBottom: '8px'
                        }}>
                          <span style={{ fontWeight: '600', color: '#1a202c' }}>Data ke-{entry.data_number}</span>
                          <button
                            onClick={() => handleDeleteEntry(areaIndex, entryIndex)}
                            style={{
                              padding: '6px 12px',
                              background: '#ef4444',
                              color: 'white',
                              border: 'none',
                              borderRadius: '8px',
                              cursor: 'pointer',
                              fontSize: '13px',
                              display: 'flex',
                              alignItems: 'center',
                              gap: '4px'
                            }}
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                        {entry.foto_url && (
                          <img src={entry.foto_url} alt="foto" style={{
                            width: '100%',
                            height: '160px',
                            objectFit: 'cover',
                            borderRadius: '8px',
                            marginBottom: '8px'
                          }} />
                        )}
                        <p style={{ fontSize: '14px', color: '#718096' }}>{entry.keterangan}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ))}

            <div style={{
              borderTop: '2px solid #e5e7eb',
              paddingTop: '24px',
              marginTop: '24px'
            }}>
              <h3 style={{
                fontSize: '20px',
                fontWeight: '700',
                marginBottom: '16px',
                color: '#1a202c'
              }}>Data ke-{currentDataNumber}</h3>

              {!currentFoto ? (
                <div>
                  <p style={{
                    fontSize: '14px',
                    color: '#ef4444',
                    marginBottom: '12px',
                    padding: '8px 12px',
                    background: '#fee2e2',
                    borderRadius: '8px'
                  }}>Foto belum diambil</p>
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: '1fr 1fr',
                    gap: '12px'
                  }}>
                    <button
                      onClick={handleCameraClick}
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        gap: '8px',
                        padding: '16px 24px',
                        background: '#dbeafe',
                        border: '2px dashed #60a5fa',
                        color: '#2563eb',
                        borderRadius: '12px',
                        cursor: 'pointer',
                        fontWeight: '600',
                        fontSize: '15px',
                        transition: 'all 0.2s'
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.background = '#bfdbfe'}
                      onMouseLeave={(e) => e.currentTarget.style.background = '#dbeafe'}
                    >
                      <Camera size={20} />
                      Ambil Foto
                    </button>
                    <button
                      onClick={handleUploadClick}
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        gap: '8px',
                        padding: '16px 24px',
                        background: '#dbeafe',
                        border: '2px dashed #60a5fa',
                        color: '#2563eb',
                        borderRadius: '12px',
                        cursor: 'pointer',
                        fontWeight: '600',
                        fontSize: '15px',
                        transition: 'all 0.2s'
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.background = '#bfdbfe'}
                      onMouseLeave={(e) => e.currentTarget.style.background = '#dbeafe'}
                    >
                      <Upload size={20} />
                      Upload Foto
                    </button>
                  </div>
                  <input
                    ref={uploadRef}
                    type="file"
                    accept="image/*"
                    onChange={handleFileUpload}
                    style={{ display: 'none' }}
                  />
                </div>
              ) : (
                <div style={{ marginBottom: '16px' }}>
                  <div style={{ position: 'relative' }}>
                    <img src={currentFoto} alt="preview" style={{
                      width: '100%',
                      height: '256px',
                      objectFit: 'cover',
                      borderRadius: '12px'
                    }} />
                    <button
                      onClick={() => setCurrentFoto(null)}
                      style={{
                        position: 'absolute',
                        top: '8px',
                        right: '8px',
                        padding: '10px',
                        background: '#ef4444',
                        color: 'white',
                        border: 'none',
                        borderRadius: '50%',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.background = '#dc2626'}
                      onMouseLeave={(e) => e.currentTarget.style.background = '#ef4444'}
                    >
                      <Trash2 size={16} />
                    </button>
                  </div>
                </div>
              )}

              <div style={{ marginBottom: '16px' }}>
                <label style={{
                  display: 'block',
                  fontSize: '14px',
                  fontWeight: '600',
                  color: '#2d3748',
                  marginBottom: '8px'
                }}>Keterangan</label>
                <textarea
                  value={currentKeterangan}
                  onChange={(e) => setCurrentKeterangan(e.target.value)}
                  placeholder="Masukkan keterangan"
                  style={{
                    width: '100%',
                    padding: '14px',
                    border: '2px solid #fed7aa',
                    borderRadius: '12px',
                    fontSize: '16px',
                    resize: 'none',
                    fontFamily: 'inherit',
                    outline: 'none'
                  }}
                  rows={4}
                />
              </div>

              <button
                onClick={handleTambahDataBaru}
                disabled={saving}
                style={{
                  width: '100%',
                  padding: '16px 24px',
                  background: saving ? '#9ca3af' : '#fbbf24',
                  color: '#1f2937',
                  border: 'none',
                  borderRadius: '12px',
                  fontWeight: '700',
                  fontSize: '18px',
                  cursor: saving ? 'not-allowed' : 'pointer',
                  opacity: saving ? 0.6 : 1,
                  transition: 'all 0.2s',
                  boxShadow: '0 4px 12px rgba(251,191,36,0.3)'
                }}
                onMouseEnter={(e) => !saving && (e.currentTarget.style.background = '#f59e0b')}
                onMouseLeave={(e) => !saving && (e.currentTarget.style.background = '#fbbf24')}
              >
                {saving ? 'Menyimpan...' : 'Tambah Data Baru'}
              </button>
            </div>

            {savedAreas.length > 0 && (
              <div style={{
                marginTop: '24px',
                padding: '16px',
                background: '#d1fae5',
                border: '2px solid #6ee7b7',
                borderRadius: '12px'
              }}>
                <p style={{
                  color: '#065f46',
                  fontWeight: '600',
                  marginBottom: '8px',
                  fontSize: '16px'
                }}>
                  ✅ Pengamatan Tersimpan ({totalData})
                </p>
                {savedAreas.map((areaData, idx) => (
                  <div key={idx} style={{
                    fontSize: '14px',
                    color: '#047857',
                    marginBottom: '4px'
                  }}>
                    Area: {areaData.area} ({areaData.entries.length} data tersimpan)
                  </div>
                ))}
                <p style={{
                  fontSize: '12px',
                  color: '#4b5563',
                  marginTop: '8px'
                }}>
                  Untuk menambah data baru, kembali pilih area yang berbeda atau area yang sama
                </p>
              </div>
            )}
          </div>
        )}

        {savedAreas.length > 0 && (
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '16px'
          }}>
            <button
              onClick={handleSimpanSementara}
              style={{
                width: '100%',
                padding: '16px 24px',
                background: 'white',
                border: '2px solid #d1d5db',
                color: '#374151',
                borderRadius: '12px',
                fontWeight: '700',
                fontSize: '18px',
                cursor: 'pointer',
                transition: 'all 0.2s'
              }}
              onMouseEnter={(e) => e.currentTarget.style.background = '#f9fafb'}
              onMouseLeave={(e) => e.currentTarget.style.background = 'white'}
            >
              Simpan Sementara
            </button>
            <button
              onClick={handleSimpanSemua}
              disabled={saving}
              style={{
                width: '100%',
                padding: '16px 24px',
                background: saving ? '#9ca3af' : 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
                color: 'white',
                border: 'none',
                borderRadius: '12px',
                fontWeight: '700',
                fontSize: '18px',
                cursor: saving ? 'not-allowed' : 'pointer',
                opacity: saving ? 0.6 : 1,
                boxShadow: '0 4px 12px rgba(139,92,246,0.3)',
                transition: 'transform 0.2s'
              }}
              onMouseEnter={(e) => !saving && (e.currentTarget.style.transform = 'translateY(-2px)')}
              onMouseLeave={(e) => !saving && (e.currentTarget.style.transform = 'translateY(0)')}
            >
              {saving ? 'Menyimpan...' : 'Simpan Semua'}
            </button>
          </div>
        )}
      </div>

      {cameraVisible && (
        <div style={{
          position: 'fixed',
          inset: 0,
          background: 'rgba(0,0,0,0.9)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 9999,
          padding: '20px'
        }}>
          <div style={{ maxWidth: '600px', width: '100%' }}>
            <div style={{
              background: 'white',
              borderRadius: '24px',
              padding: '20px'
            }}>
              {cameraError ? (
                <div style={{
                  textAlign: 'center',
                  padding: '32px 0'
                }}>
                  <p style={{
                    color: '#dc2626',
                    marginBottom: '16px',
                    fontSize: '16px'
                  }}>{cameraError}</p>
                  <button
                    onClick={handleCloseCamera}
                    style={{
                      padding: '12px 24px',
                      background: '#6b7280',
                      color: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      cursor: 'pointer',
                      fontSize: '16px',
                      fontWeight: '600'
                    }}
                    onMouseEnter={(e) => e.currentTarget.style.background = '#4b5563'}
                    onMouseLeave={(e) => e.currentTarget.style.background = '#6b7280'}
                  >
                    Tutup
                  </button>
                </div>
              ) : (
                <>
                  <video
                    ref={videoRef}
                    autoPlay
                    playsInline
                    style={{
                      width: '100%',
                      borderRadius: '12px',
                      marginBottom: '16px',
                      background: '#000'
                    }}
                  />
                  <div style={{
                    display: 'flex',
                    gap: '12px'
                  }}>
                    <button
                      onClick={handleCapture}
                      disabled={isCapturing}
                      style={{
                        flex: 1,
                        padding: '16px 24px',
                        background: isCapturing ? '#9ca3af' : '#10b981',
                        color: 'white',
                        border: 'none',
                        borderRadius: '12px',
                        cursor: isCapturing ? 'not-allowed' : 'pointer',
                        opacity: isCapturing ? 0.6 : 1,
                        fontWeight: '700',
                        fontSize: '18px',
                        transition: 'all 0.2s'
                      }}
                      onMouseEnter={(e) => !isCapturing && (e.currentTarget.style.background = '#059669')}
                      onMouseLeave={(e) => !isCapturing && (e.currentTarget.style.background = '#10b981')}
                    >
                      {isCapturing ? 'Mengambil...' : 'Ambil Foto'}
                    </button>
                    <button
                      onClick={handleCloseCamera}
                      style={{
                        padding: '16px 24px',
                        background: '#6b7280',
                        color: 'white',
                        border: 'none',
                        borderRadius: '12px',
                        cursor: 'pointer',
                        fontWeight: '700',
                        fontSize: '18px',
                        transition: 'all 0.2s'
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.background = '#4b5563'}
                      onMouseLeave={(e) => e.currentTarget.style.background = '#6b7280'}
                    >
                      Batal
                    </button>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CreateMonitoringScreen;
